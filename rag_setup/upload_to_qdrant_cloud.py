"""
Upload Business Context to Qdrant Cloud
========================================
Este script sube los contextos de negocio a una colecci√≥n de Qdrant Cloud.
"""
import os
import sys
from pathlib import Path
from qdrant_client import QdrantClient
from qdrant_client.models import Distance, VectorParams, PointStruct
from openai import OpenAI
import uuid
from typing import List, Dict

# Cargar .env
try:
    from dotenv import load_dotenv
    env_path = Path(__file__).parent.parent / '.env'
    load_dotenv(env_path)
    print(f"‚úÖ Loaded .env from {env_path}")
except ImportError:
    print("‚ö†Ô∏è  python-dotenv not installed. Using environment variables only.")
except Exception as e:
    print(f"‚ö†Ô∏è  Could not load .env: {e}")

# Configuraci√≥n
QDRANT_URL = os.getenv("QDRANT_URL", "")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
COLLECTION_NAME = "rappi_business_context"

# Inicializar clientes (lazy initialization)
openai_client = None
qdrant_client = None

# Datos de contexto de negocio
business_contexts = [
    {
        "title": "% PRO Users Who Breakeven",
        "content": "Usuarios con suscripci√≥n Pro cuyo valor generado para la empresa (a trav√©s de compras, comisiones, etc.) ha cubierto el costo total de su membres√≠a dividido por el total de usuarios con suscripci√≥n Pro.",
        "category": "metrics"
    },
    {
        "title": "% Restaurants Sessions With Optimal Assortment",
        "content": "Sesiones con un m√≠nimo de 40 restaurantes dividido por el total de sesiones.",
        "category": "metrics"
    },
    {
        "title": "Gross Profit UE",
        "content": "Margen bruto de ganancia dividido por el total de √≥rdenes. Indica la rentabilidad por orden.",
        "category": "metrics"
    },
    {
        "title": "Lead Penetration",
        "content": "Tiendas habilitadas en Rappi dividido por (Tiendas previamente identificadas como prospectos (leads) + Tiendas habilitadas + tiendas que salieron de Rappi). Mide la penetraci√≥n de mercado.",
        "category": "metrics"
    },
    {
        "title": "MLTV Top Verticals Adoption",
        "content": "Usuarios con √≥rdenes en diferentes verticales (restaurantes, super, pharmacy, liquors) dividido por el total de usuarios. Indica adopci√≥n multi-vertical.",
        "category": "metrics"
    },
    {
        "title": "Non-Pro PTC > OP",
        "content": "Conversi√≥n de usuarios No Pro de 'Proceed to Checkout' a 'Order Placed'. M√©trica de conversi√≥n de checkout.",
        "category": "metrics"
    },
    {
        "title": "Perfect Orders",
        "content": "√ìrdenes sin cancelaciones, defectos o demora dividido por el total de √≥rdenes. Indica calidad operacional.",
        "category": "metrics"
    },
    {
        "title": "Pro Adoption",
        "content": "Usuarios con suscripci√≥n Pro dividido por el total de usuarios de Rappi. Mide adopci√≥n del programa de suscripci√≥n.",
        "category": "metrics"
    },
    {
        "title": "Restaurants Markdowns / GMV",
        "content": "Descuentos totales en √≥rdenes de restaurantes dividido por el total Gross Merchandise Value de Restaurantes. Indica nivel de descuentos.",
        "category": "metrics"
    },
    {
        "title": "Restaurants SS > ATC CVR",
        "content": "Conversi√≥n en restaurantes de 'Select Store' a 'Add to Cart'. M√©trica de conversi√≥n en funnel de compra.",
        "category": "metrics"
    },
    {
        "title": "Restaurants SST > SS CVR",
        "content": "Porcentaje de usuarios que despu√©s de seleccionar Restaurantes, proceden a seleccionar una tienda en particular. M√©trica de conversi√≥n de categor√≠a a tienda.",
        "category": "metrics"
    },
    {
        "title": "Retail SST > SS CVR",
        "content": "Porcentaje de usuarios que despu√©s de seleccionar Supermercados, proceden a seleccionar una tienda en particular. M√©trica de conversi√≥n de categor√≠a a tienda.",
        "category": "metrics"
    },
    {
        "title": "Turbo Adoption",
        "content": "Total de usuarios que compran en Turbo (Servicio fast de Rappi) dividido por el total de usuarios de Rappi con tiendas de Turbo disponibles.",
        "category": "metrics"
    },
    {
        "title": "Zone Segmentation",
        "content": "Las zonas se clasifican en Wealthy (zonas ricas) y Non Wealthy (zonas no ricas) seg√∫n el nivel socioecon√≥mico.",
        "category": "geography"
    },
    {
        "title": "Zone Prioritization",
        "content": "Las zonas tienen tres niveles de priorizaci√≥n: High Priority (alta prioridad), Prioritized (priorizada), Not Prioritized (no priorizada).",
        "category": "geography"
    },
    {
        "title": "Time Series Data",
        "content": "Los datos hist√≥ricos se almacenan en columnas L8W (hace 8 semanas) hasta L0W (semana actual). L0W siempre representa la semana m√°s reciente.",
        "category": "data_structure"
    },
    {
        "title": "Countries",
        "content": "Rappi opera en 9 pa√≠ses: Argentina (AR), Brasil (BR), Chile (CL), Colombia (CO), Costa Rica (CR), Ecuador (EC), M√©xico (MX), Per√∫ (PE), Uruguay (UY).",
        "category": "geography"
    }
]


def create_embedding(text: str) -> List[float]:
    """Genera embedding usando OpenAI"""
    response = openai_client.embeddings.create(
        model="text-embedding-3-small",
        input=text
    )
    return response.data[0].embedding


def create_collection():
    """Crea la colecci√≥n en Qdrant Cloud si no existe"""
    try:
        qdrant_client.get_collection(collection_name=COLLECTION_NAME)
        print(f"‚úÖ Collection '{COLLECTION_NAME}' already exists")
    except:
        print(f"üì¶ Creating collection '{COLLECTION_NAME}'...")
        qdrant_client.create_collection(
            collection_name=COLLECTION_NAME,
            vectors_config=VectorParams(size=1536, distance=Distance.COSINE)
        )
        print(f"‚úÖ Collection created successfully")


def upload_contexts():
    """Sube los contextos de negocio a Qdrant Cloud"""
    print("\n" + "=" * 70)
    print("Uploading Business Context to Qdrant Cloud")
    print("=" * 70)

    # Crear colecci√≥n
    create_collection()

    # Subir cada contexto
    points = []
    for idx, context in enumerate(business_contexts):
        try:
            # Generar embedding del contenido
            text_to_embed = f"{context['title']}\n\n{context['content']}"
            embedding = create_embedding(text_to_embed)

            # Crear punto
            point = PointStruct(
                id=str(uuid.uuid4()),
                vector=embedding,
                payload={
                    "title": context["title"],
                    "content": context["content"],
                    "category": context["category"],
                    "type": "business_context"
                }
            )
            points.append(point)

            print(f"‚úÖ [{idx+1}/{len(business_contexts)}] Prepared: {context['title']}")

        except Exception as e:
            print(f"‚ùå Error preparing {context['title']}: {e}")

    # Subir todos los puntos de una vez
    if points:
        try:
            print(f"\nüì§ Uploading {len(points)} points to Qdrant Cloud...")
            qdrant_client.upsert(
                collection_name=COLLECTION_NAME,
                points=points
            )
            print(f"‚úÖ Successfully uploaded {len(points)} contexts")
        except Exception as e:
            print(f"‚ùå Error uploading points: {e}")

    # Verificar
    print("\n[Verification]")
    try:
        collection_info = qdrant_client.get_collection(collection_name=COLLECTION_NAME)
        print(f"‚úÖ Collection: {COLLECTION_NAME}")
        print(f"   Total points: {collection_info.points_count}")
        print(f"   Vector dimension: 1536")

        # Test de b√∫squeda
        print("\n[Test Search] Searching for 'Perfect Orders'...")
        test_embedding = create_embedding("Perfect Orders")
        results = qdrant_client.search(
            collection_name=COLLECTION_NAME,
            query_vector=test_embedding,
            limit=3
        )

        if results:
            print(f"‚úÖ Found {len(results)} results:")
            for i, result in enumerate(results):
                print(f"   {i+1}. {result.payload.get('title')} (score: {result.score:.3f})")
        else:
            print("‚ö†Ô∏è  No results found")

    except Exception as e:
        print(f"‚ùå Verification error: {e}")

    print("\n" + "=" * 70)
    print("Upload complete!")
    print("=" * 70)
    print(f"\nQdrant Cloud URL: {QDRANT_URL}")
    print(f"Collection Name: {COLLECTION_NAME}")


def upload_content_only():
    """
    Sube SOLO el contenido a Qdrant Cloud.
    Payload m√≠nimo: solo el texto completo en el campo 'content'.
    REEMPLAZA todos los datos anteriores.
    """
    print("\n" + "=" * 70)
    print("Uploading Business Context - CONTENT ONLY FORMAT")
    print("=" * 70)

    # Recrear colecci√≥n (borra datos anteriores)
    try:
        print(f"üóëÔ∏è  Deleting existing collection '{COLLECTION_NAME}'...")
        qdrant_client.delete_collection(collection_name=COLLECTION_NAME)
        print(f"‚úÖ Collection deleted")
    except:
        print(f"‚ÑπÔ∏è  Collection doesn't exist yet")

    print(f"üì¶ Creating fresh collection '{COLLECTION_NAME}'...")
    qdrant_client.create_collection(
        collection_name=COLLECTION_NAME,
        vectors_config=VectorParams(size=1536, distance=Distance.COSINE)
    )
    print(f"‚úÖ Collection created")

    # Subir cada contexto con payload m√≠nimo
    points = []
    for idx, context in enumerate(business_contexts):
        try:
            # TODO en un solo texto
            full_content = f"""T√≠tulo: {context['title']}
Categor√≠a: {context['category']}

Definici√≥n:
{context['content']}"""

            # Generar embedding
            embedding = create_embedding(full_content)

            # Payload M√çNIMO - solo el contenido
            point = PointStruct(
                id=str(uuid.uuid4()),
                vector=embedding,
                payload={
                    "content": full_content  # SOLO esto
                }
            )
            points.append(point)

            print(f"‚úÖ [{idx+1}/{len(business_contexts)}] Prepared: {context['title']}")

        except Exception as e:
            print(f"‚ùå Error preparing {context['title']}: {e}")

    # Subir
    if points:
        try:
            print(f"\nüì§ Uploading {len(points)} points...")
            qdrant_client.upsert(
                collection_name=COLLECTION_NAME,
                points=points
            )
            print(f"‚úÖ Successfully uploaded {len(points)} contexts")
        except Exception as e:
            print(f"‚ùå Error uploading: {e}")

    # Verificar
    print("\n[Verification]")
    try:
        collection_info = qdrant_client.get_collection(collection_name=COLLECTION_NAME)
        print(f"‚úÖ Collection: {COLLECTION_NAME}")
        print(f"   Total points: {collection_info.points_count}")

        # Test
        print("\n[Test Search] Searching for 'Perfect Orders'...")
        test_embedding = create_embedding("Perfect Orders")
        results = qdrant_client.search(
            collection_name=COLLECTION_NAME,
            query_vector=test_embedding,
            limit=3
        )

        if results:
            print(f"‚úÖ Found {len(results)} results:")
            for i, result in enumerate(results):
                content = result.payload.get('content', '')
                print(f"\n   {i+1}. Score: {result.score:.3f}")
                print(f"   {content[:150]}...")
        else:
            print("‚ö†Ô∏è  No results found")

    except Exception as e:
        print(f"‚ùå Verification error: {e}")

    print("\n" + "=" * 70)
    print("Upload complete!")
    print("=" * 70)
    print(f"\nCollection: {COLLECTION_NAME}")
    print(f"Format: payload = {{ 'content': 'texto completo' }}")
    print(f"Total points: {len(points)}")


def main():
    """Main function"""
    global openai_client, qdrant_client

    # Verificar variables de entorno
    if not QDRANT_URL:
        print("‚ùå QDRANT_URL not set")
        print("   Set it in n8n_workflows/.env file")
        return

    if not QDRANT_API_KEY:
        print("‚ùå QDRANT_API_KEY not set")
        print("   Set it in n8n_workflows/.env file")
        return

    if not OPENAI_API_KEY:
        print("‚ùå OPENAI_API_KEY not set")
        print("   Set it in n8n_workflows/.env file")
        return

    # Inicializar clientes
    try:
        openai_client = OpenAI(api_key=OPENAI_API_KEY)

        # Intentar conectar con la URL original
        print(f"üîó Connecting to Qdrant at: {QDRANT_URL}")
        try:
            qdrant_client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)
            # Test connection
            qdrant_client.get_collections()
            print("‚úÖ Clients initialized successfully")
        except Exception as ssl_error:
            # Si falla con SSL error, intentar con el protocolo opuesto
            if "SSL" in str(ssl_error) or "WRONG_VERSION_NUMBER" in str(ssl_error):
                print(f"‚ö†Ô∏è  SSL error detected, trying alternate protocol...")
                alternate_url = QDRANT_URL.replace("https://", "http://") if "https://" in QDRANT_URL else QDRANT_URL.replace("http://", "https://")
                print(f"üîó Trying: {alternate_url}")
                qdrant_client = QdrantClient(url=alternate_url, api_key=QDRANT_API_KEY)
                qdrant_client.get_collections()
                print(f"‚úÖ Connected successfully with {alternate_url}")
                print(f"üí° Update your .env file to use: QDRANT_URL={alternate_url}")
            else:
                raise

    except Exception as e:
        print(f"‚ùå Error initializing clients: {e}")
        return

    # Llamar a la funci√≥n de solo contenido
    upload_content_only()


if __name__ == "__main__":
    main()
